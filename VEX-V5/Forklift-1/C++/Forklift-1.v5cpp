{
    "mode": "Text",
    "textContent": "#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor Arm = motor(PORT3, ratio18_1, false);\n\nmotor Elbow = motor(PORT4, ratio18_1, false);\n\nmotor Clip = motor(PORT5, ratio18_1, true);\n\nmotor Drivetrain1MotorA = motor(PORT1, ratio18_1, false);\nmotor Drivetrain1MotorB = motor(PORT2, ratio18_1, true);\nmotor_group Drivetrain1 = motor_group(Drivetrain1MotorA, Drivetrain1MotorB);\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool Controller1XBButtonsControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonL1/ButtonL2 status to control Arm\n      if (Controller1.ButtonL1.pressing()) {\n        Arm.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        Arm.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        Arm.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control Elbow\n      if (Controller1.ButtonR1.pressing()) {\n        Elbow.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        Elbow.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        Elbow.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonX/ButtonB status to control Clip\n      if (Controller1.ButtonX.pressing()) {\n        Clip.spin(forward);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonB.pressing()) {\n        Clip.spin(reverse);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (!Controller1XBButtonsControlMotorsStopped) {\n        Clip.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1XBButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  //Speeds\n  Arm.setVelocity(1, percent);\n  Elbow.setVelocity(40, percent);\n  Clip.setVelocity(50, percent);\n  Drivetrain1.setVelocity(1, percent);\n  \n  \n  //Torques\n  Arm.setMaxTorque(80, percent);\n  Elbow.setMaxTorque(65, percent);\n  Clip.setMaxTorque(85, percent);\n\n  //Holds\n  Arm.setStopping(hold);\n  Elbow.setStopping(hold);\n  Clip.setStopping(hold);\n  Drivetrain1.setStopping(brake);\n\n  return 0;\n}\n\n\nint main() {\n  task rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n  whenStarted1();\n  while(true){\n      Arm.spin(directionType::fwd, Controller1.Axis2.value(), velocityUnits::pct);\n      \n      //Drivetrain Straight\n      Drivetrain1.spin(directionType::fwd, Controller1.Axis3.value(), velocityUnits::rpm);\n      \n      //Drivetrain Turning\n      while(Controller1.Axis4.position()>50){\n      Drivetrain1MotorA.spin(directionType::fwd, Controller1.Axis4.value(), velocityUnits::pct);\n      Drivetrain1MotorB.spin(directionType::rev, Controller1.Axis4.value(), velocityUnits::pct);\n      }\n      while(Controller1.Axis4.position()<-50){ \n      Drivetrain1MotorA.spin(directionType::fwd, Controller1.Axis4.value(), velocityUnits::pct);\n      Drivetrain1MotorB.spin(directionType::rev, Controller1.Axis4.value(), velocityUnits::pct);\n      }     \n  }  \n}",
    "textLanguage": "cpp",
    "rconfig": [
        {
            "port": [],
            "name": "Controller1",
            "customName": false,
            "deviceType": "Controller",
            "deviceClass": "controller",
            "setting": {
                "left": "Arm",
                "leftDir": "false",
                "right": "Elbow",
                "rightDir": "false",
                "upDown": "",
                "upDownDir": "false",
                "xB": "Clip",
                "xBDir": "false",
                "drive": "none",
                "id": "primary"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                3
            ],
            "name": "Arm",
            "customName": true,
            "deviceType": "Motor",
            "deviceClass": "motor",
            "setting": {
                "reversed": "false",
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio18_1",
                "id": "partner"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                4
            ],
            "name": "Elbow",
            "customName": true,
            "deviceType": "Motor",
            "deviceClass": "motor",
            "setting": {
                "reversed": "false",
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio18_1"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                5
            ],
            "name": "Clip",
            "customName": true,
            "deviceType": "Motor",
            "deviceClass": "motor",
            "setting": {
                "reversed": "true",
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio18_1"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                1,
                2
            ],
            "name": "Drivetrain1",
            "customName": true,
            "deviceType": "MotorGroup",
            "deviceClass": "motor_group",
            "setting": {
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio18_1",
                "motor_a_reversed": "false",
                "motor_b_reversed": "true"
            },
            "triportSourcePort": 22
        }
    ],
    "slot": 0,
    "platform": "V5",
    "sdkVersion": "20211013.15.00.00",
    "appVersion": "2.2.1",
    "fileFormat": "1.0.1",
    "icon": "",
    "targetBrainGen": "First",
    "target": "Physical"
}