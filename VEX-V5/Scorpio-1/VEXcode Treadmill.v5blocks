{
    "mode": "Blocks",
    "workspace": "<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"></block></xml>",
    "rconfig": [
        {
            "port": [
                1,
                2,
                0
            ],
            "name": "Drivetrain",
            "customName": false,
            "deviceType": "Drivetrain",
            "deviceClass": "smartdrive",
            "setting": {
                "type": "2-motor",
                "wheelSize": "wheel4in",
                "gear": "ratio18_1",
                "gearRatio": "1:1",
                "direction": "fwd",
                "gyroType": "none",
                "width": "14",
                "unit": "in",
                "wheelbase": "0.39",
                "wheelbaseUnit": "in",
                "xOffset": "0",
                "xOffsetUnit": "mm",
                "yOffset": "0",
                "yOffsetUnit": "mm",
                "thetaOffset": "180"
            },
            "triportSourcePort": null
        },
        {
            "port": [],
            "name": "Controller1",
            "customName": false,
            "deviceType": "Controller",
            "deviceClass": "controller",
            "setting": {
                "left": "",
                "leftDir": "false",
                "right": "",
                "rightDir": "false",
                "upDown": "Rear",
                "upDownDir": "false",
                "xB": "Rear",
                "xBDir": "false",
                "drive": "arcadel",
                "id": "primary"
            },
            "triportSourcePort": 22
        },
        {
            "port": [
                3
            ],
            "name": "Rear",
            "customName": true,
            "deviceType": "Motor",
            "deviceClass": "motor",
            "setting": {
                "reversed": "false",
                "fwd": "forward",
                "rev": "reverse",
                "gear": "ratio18_1",
                "id": "partner"
            }
        }
    ],
    "slot": 0,
    "platform": "V5",
    "sdkVersion": "20210708.10.00.00",
    "appVersion": "2.2.0",
    "fileFormat": "1.0.1",
    "icon": "",
    "targetBrainGen": "First",
    "cppStatus": "true",
    "cpp": "// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, ratio18_1, false);\nmotor RightDriveSmart = motor(PORT2, ratio18_1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 355.59999999999997, 9.906, mm, 1);\n\ncontroller Controller1 = controller(primary);\nmotor Rear = motor(PORT3, ratio18_1, false);\n\n\n\n\n// Generated code.\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1XBButtonsControlMotorsStopped = true;\nbool DrivetrainNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis4\n      // right = Axis3 - Axis4\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis4.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis4.position();\n      \n      // check if the values are inside of the deadband range\n      if (abs(drivetrainLeftSideSpeed) < 5 && abs(drivetrainRightSideSpeed) < 5) {\n        // check if the motors have already been stopped\n        if (DrivetrainNeedsToBeStopped_Controller1) {\n          // stop the drive motors\n          LeftDriveSmart.stop();\n          RightDriveSmart.stop();\n          // tell the code that the motors have been stopped\n          DrivetrainNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the motors next time the input is in the deadband range\n        DrivetrainNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonX/ButtonB status to control Rear\n      if (Controller1.ButtonX.pressing()) {\n        Rear.spin(forward);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonB.pressing()) {\n        Rear.spin(reverse);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (!Controller1XBButtonsControlMotorsStopped) {\n        Rear.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1XBButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  return 0;\n}\n\n\nint main() {\n  task rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}",
    "target": "Physical"
}