{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\ncontroller Controller1 = controller(primary);\nmotor Rear = motor(PORT6, ratio18_1, true);\n\nmotor Treadmill = motor(PORT5, ratio18_1, true);\n\nmotor Drivetrain0MotorA = motor(PORT2, ratio18_1, false);\nmotor Drivetrain0MotorB = motor(PORT1, ratio18_1, true);\nmotor_group Drivetrain0 = motor_group(Drivetrain0MotorA, Drivetrain0MotorB);\n\nmotor Fishook = motor(PORT4, ratio18_1, false);\n\nmotor Base = motor(PORT3, ratio18_1, true);\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1UpDownButtonsControlMotorsStopped = true;\nbool Controller1XBButtonsControlMotorsStopped = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // check the ButtonL1/ButtonL2 status to control Rear\n      if (Controller1.ButtonL1.pressing()) {\n        Rear.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        Rear.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        Rear.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonUp/ButtonDown status to control Fishook\n      if (Controller1.ButtonUp.pressing()) {\n        Fishook.spin(forward);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonDown.pressing()) {\n        Fishook.spin(reverse);\n        Controller1UpDownButtonsControlMotorsStopped = false;\n      } else if (!Controller1UpDownButtonsControlMotorsStopped) {\n        Fishook.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1UpDownButtonsControlMotorsStopped = true;\n      }\n      // check the ButtonX/ButtonB status to control Base\n      if (Controller1.ButtonX.pressing()) {\n        Base.spin(forward);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (Controller1.ButtonB.pressing()) {\n        Base.spin(reverse);\n        Controller1XBButtonsControlMotorsStopped = false;\n      } else if (!Controller1XBButtonsControlMotorsStopped) {\n        Base.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1XBButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Drivetrain0.setVelocity(0.0000000001, percent);\n  Treadmill.setVelocity(38, percent);\n  Base.setVelocity(10, percent);\n  Rear.setVelocity(70, percent);\n  \n  Base.setMaxTorque(70, percent);\n  \n  Base.setStopping(hold);\n  Fishook.setStopping(hold);\n  Rear.setStopping(hold);\n\n  return 0;\n}\n\nvoid treadSpin(){\n  Treadmill.spin(reverse);\n}\n\nvoid treadStop(){\n  Treadmill.stop();\n}\n\nvoid driverControl1(){\n  Drivetrain0.setVelocity(0.0000000001, percent);\n\n  while(true){\n      Drivetrain0MotorA.spin(directionType::fwd, Controller1.Axis3.value(), velocityUnits::pct);\n      Drivetrain0MotorB.spin(directionType::fwd, Controller1.Axis2.value(), velocityUnits::pct);\n\n      Controller1.ButtonR2.pressed(treadSpin);\n      Controller1.ButtonR1.pressed(treadStop);\n  }\n}\n\nvoid autonomous1(){\n  //setup\n  Drivetrain0.setVelocity(100, rpm);\n  Rear.setPosition(0, degrees);\n  Rear.spinFor(forward, 435, degrees);\n  treadSpin();\n  //grab base\n  Drivetrain0.spinFor(reverse, 93.6, degrees);\n  Fishook.spinFor(forward, 0.25, seconds);\n  Base.spinFor(forward, 0.25, seconds);\n  //grab rings\n  Drivetrain0MotorB.spinFor(forward, 1.5, seconds);\n  Drivetrain0.spinFor(forward, 2.26, seconds);\n}\n\nint main() {\n  task rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n  \n\n  whenStarted1();\n\n  competition Competition;\n\n  Competition.autonomous(autonomous1);\n  Competition.drivercontrol(driverControl1);\n}","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"Rear","leftDir":"false","right":"","rightDir":"false","upDown":"Fishook","upDownDir":"false","xB":"Base","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[6],"name":"Rear","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[5],"name":"Treadmill","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2,1],"name":"Drivetrain0","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[4],"name":"Fishook","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"Base","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}